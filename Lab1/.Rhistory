# Filter the data to include only data from the start date until the end of the corresponding month
start_date <- as.Date("2020-01-01")
end_date <- as.Date(paste(format(date_95_percent, "%Y-%m"), "-28", sep=""))  # Adjust the end date to the end of the month
filtered_df <- combined_data %>%
filter(date >= start_date & date <= end_date)
# Normalize the y-axis to be between 0 and 1 for each continent
normalized_df <- filtered_df %>%
group_by(continent) %>%
mutate(normalized_deaths = cumulative_deaths / max(cumulative_deaths, na.rm = TRUE)) %>%
ungroup()
# Define a custom color palette
continent_colors <- c("Africa" = "red", "Asia" = "blue", "Europe" = "green",
"North America" = "yellow", "Oceania" = "pink",
"South America" = "orange", "World" = "black")
# Plot the normalized cumulative total deaths for each continent
normalized_plot <- ggplot(normalized_df, aes(x = date, y = normalized_deaths, color = continent, group = continent)) +
geom_line(size = 0.7) +
scale_color_manual(values = continent_colors) +
labs(
title = "Normalized Cumulative Total Deaths by Date for Each Continent",
x = "Date",
y = "Normalized Total Deaths",
color = "Continent"
) +
theme_minimal()
# Print the normalized plot
print(normalized_plot)
# Find and report the median date in terms of total deaths for each continent
median_dates <- normalized_df %>%
group_by(continent) %>%
summarise(median_date = date[which.max(normalized_deaths >= 0.5)])
# Print the median dates
print(median_dates)
#c.
# Group data by date and continent to calculate cumulative total vaccinations per hundred
continent_vaccinations <- covid_data %>%
filter(continent != "") %>%
group_by(continent, date) %>%
summarise(total_vaccinations_per_hundred = sum(total_vaccinations_per_hundred, na.rm = TRUE)) %>%
arrange(continent, date) %>%
mutate(cumulative_vaccinations = cumsum(total_vaccinations_per_hundred)) %>%
ungroup()
# Calculate cumulative total vaccinations per hundred for the world
world_vaccinations <- covid_data %>%
filter() %>%
group_by(date) %>%
summarise(total_vaccinations_per_hundred = sum(total_vaccinations_per_hundred, na.rm = TRUE)) %>%
arrange(date) %>%
mutate(cumulative_vaccinations = cumsum(total_vaccinations_per_hundred)) %>%
ungroup() %>%
mutate(continent = "World")
# Combine continent and world data
combined_vaccinations <- bind_rows(continent_vaccinations, world_vaccinations)
# Define a custom color palette
continent_colors <- c("Africa" = "red", "Asia" = "blue", "Europe" = "green",
"North America" = "yellow", "Oceania" = "pink",
"South America" = "orange", "World" = "black")
# Plot the cumulative total vaccinations per hundred over time for each continent and the world
vaccinations_plot <- ggplot(combined_vaccinations, aes(x = date, y = cumulative_vaccinations, color = continent)) +
geom_line(size = 0.7) +
labs(
title = "Cumulative Total Vaccinations per Hundred by Continent",
x = "Date",
y = "Cumulative Total Vaccinations per Hundred",
color = "Continent"
) +
scale_color_manual(values = continent_colors) +
theme_minimal()
# Print the plot
print(vaccinations_plot)
# d.
# Add death_rate column
covid_data <- covid_data %>%
mutate(death_rate = total_deaths / total_cases)
# Filter the data for plotting death_rate
filtered_data <- covid_data %>%
filter(date >= as.Date("2021-01-01") & !is.na(death_rate))
# Group data by date and continent to calculate average death rate
continent_death_rate <- filtered_data %>%
filter(!is.na(continent) & continent != "") %>%
group_by(continent, date) %>%
summarise(death_rate = mean(death_rate, na.rm = TRUE)) %>%
arrange(continent, date) %>%
ungroup()
# Calculate average death rate for the world
world_death_rate <- filtered_data %>%
group_by(date) %>%
summarise(death_rate = mean(death_rate, na.rm = TRUE)) %>%
arrange(date) %>%
ungroup() %>%
mutate(continent = "World")
# Combine continent and world data
combined_death_rate <- bind_rows(continent_death_rate, world_death_rate)
# Define a custom color palette
continent_colors <- c("Africa" = "red", "Asia" = "blue", "Europe" = "green",
"North America" = "yellow", "Oceania" = "pink",
"South America" = "orange", "World" = "black")
# Plot the death rate over time for each continent and the world
death_rate_plot <- ggplot(combined_death_rate, aes(x = date, y = death_rate, color = continent)) +
geom_line(size = 0.7) +
labs(
title = "Death Rate Over Time by Continent and World",
x = "Date",
y = "Death Rate",
color = "Continent"
) +
scale_color_manual(values = continent_colors) +
theme_minimal()
# Print the death rate plot
print(death_rate_plot)
library(rworldmap)
library(dplyr)
mapCountryData(
joinCountryData2Map(
current,
joinCode = 'NAME',
nameJoinColumn = 'location'
),
nameColumnToPlot = 'total_deaths_per_million',
mapTitle = "total_deaths_per_million",
colourPalette = "heat",
addLegend = TRUE,
oceanCol = 'lightblue',
missingCountryCol = 'white')
mapCountryData(
joinCountryData2Map(
current,
joinCode = 'NAME',
nameJoinColumn = 'location'
),
nameColumnToPlot = 'total_vaccinations_per_hundred',
mapTitle = "total_vaccinations_per_hundred",
colourPalette = "heat",
addLegend = TRUE,
oceanCol = 'lightblue',
missingCountryCol = 'white')
mapCountryData(
joinCountryData2Map(
current,
joinCode = 'NAME',
nameJoinColumn = 'location'
),
nameColumnToPlot = 'excess_mortality_cumulative_per_million',
mapTitle = "excess_mortality_cumulative_per_million",
colourPalette = "heat",
addLegend = TRUE,
oceanCol = 'lightblue',
missingCountryCol = 'white')
map_data <- current %>%
filter(!is.na(total_deaths_per_million) | !is.na(total_vaccinations_per_hundred) | !is.na(excess_mortality_cumulative_per_million)) %>%
select(country = location, total_deaths_per_million, total_vaccinations_per_hundred, excess_mortality_cumulative_per_million)
# Find top three countries for each variable
top_deaths <- map_data %>% arrange(desc(total_deaths_per_million)) %>% head(3)
top_vaccinations <- map_data %>% arrange(desc(total_vaccinations_per_hundred)) %>% head(3)
top_mortality <- map_data %>% arrange(desc(excess_mortality_cumulative_per_million)) %>% head(3)
# Combine into a single summary table
summary_table <- data.frame(
Variable = c("Total Deaths per Million", "Total Vaccinations per Hundred", "Excess Mortality Cumulative per Million"),
Country1 = c(top_deaths$country[1], top_vaccinations$country[1], top_mortality$country[1]),
Value1 = c(top_deaths$total_deaths_per_million[1], top_vaccinations$total_vaccinations_per_hundred[1], top_mortality$excess_mortality_cumulative_per_million[1]),
Country2 = c(top_deaths$country[2], top_vaccinations$country[2], top_mortality$country[2]),
Value2 = c(top_deaths$total_deaths_per_million[2], top_vaccinations$total_vaccinations_per_hundred[2], top_mortality$excess_mortality_cumulative_per_million[2]),
Country3 = c(top_deaths$country[3], top_vaccinations$country[3], top_mortality$country[3]),
Value3 = c(top_deaths$total_deaths_per_million[3], top_vaccinations$total_vaccinations_per_hundred[3], top_mortality$excess_mortality_cumulative_per_million[3])
)
print(summary_table)
# Ensure required libraries are loaded
library(ggplot2)
library(dplyr)
# Filter data to include only rows with non-NA values for the required columns
scatter_data <- current %>%
filter(!is.na(total_deaths_per_million) & !is.na(excess_mortality_cumulative_per_million))
# Create the scatter plot
scatter_plot <- ggplot(scatter_data, aes(x = total_deaths_per_million, y = excess_mortality_cumulative_per_million)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue", size = 1) + # y = x line
geom_abline(intercept = 3000, slope = 1, linetype = "dashed", color = "red", size = 1) + # y = x + 3000 line
geom_abline(intercept = -3000, slope = 1, linetype = "dashed", color = "green", size = 1) + # y = x - 3000 line
labs(title = "Total Deaths per Million vs. Excess Mortality Cumulative per Million",
x = "Total Deaths per Million",
y = "Excess Mortality Cumulative per Million") +
theme_minimal()
# Highlight and label countries where the difference is at least 3000
highlighted_countries <- scatter_data %>%
filter(abs(excess_mortality_cumulative_per_million - total_deaths_per_million) >= 3000)
scatter_plot <- scatter_plot +
geom_point(data = highlighted_countries, aes(x = total_deaths_per_million, y = excess_mortality_cumulative_per_million), color = "red") +
geom_text(data = highlighted_countries, aes(x = total_deaths_per_million, y = excess_mortality_cumulative_per_million, label = location), vjust = -1, size = 3, color = "black")
# Print the plot
print(scatter_plot)
# Identify countries with excess mortality at least 3000 above the reported death rate and at least 50 data points
selected_countries <- current %>%
filter((excess_mortality_cumulative_per_million - total_deaths_per_million) >= 3000) %>%
group_by(location) %>%
filter(n() >= 50) %>%
top_n(3, excess_mortality_cumulative_per_million - total_deaths_per_million) %>%
pull(location)
# Filter main covid data for the selected countries
time_series_data <- covid_data %>%
filter(location %in% selected_countries & !is.na(total_deaths_per_million) & !is.na(excess_mortality_cumulative_per_million))
# Plot the time series for total deaths and excess mortality for the selected countries
time_series_plot <- ggplot(time_series_data, aes(x = date)) +
geom_line(aes(y = total_deaths_per_million, color = location, linetype = "Total Deaths per Million")) +
geom_line(aes(y = excess_mortality_cumulative_per_million, color = location, linetype = "Excess Mortality per Million")) +
labs(title = "Total Deaths per Million and Excess Mortality per Million Over Time",
x = "Date",
y = "Deaths per Million",
color = "Country",
linetype = "Metric") +
theme_minimal()
# Print the plot
print(time_series_plot)
# Identify countries with excess mortality at least 3000 above the reported death rate and at least 50 data points
selected_countries <- current %>%
filter((excess_mortality_cumulative_per_million - total_deaths_per_million) >= 3000) %>%
group_by(location) %>%
filter(n() >= 50) %>%
top_n(3, excess_mortality_cumulative_per_million - total_deaths_per_million) %>%
pull(location)
# Ensure required libraries are loaded
library(ggplot2)
library(dplyr)
# Filter data to include only rows with non-NA values for the required columns
scatter_data <- current %>%
filter(!is.na(total_deaths_per_million) & !is.na(excess_mortality_cumulative_per_million))
# Create the scatter plot
scatter_plot <- ggplot(scatter_data, aes(x = total_deaths_per_million, y = excess_mortality_cumulative_per_million)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue", size = 1) + # y = x line
geom_abline(intercept = 3000, slope = 1, linetype = "dashed", color = "red", size = 1) + # y = x + 3000 line
geom_abline(intercept = -3000, slope = 1, linetype = "dashed", color = "green", size = 1) + # y = x - 3000 line
labs(title = "Total Deaths per Million vs. Excess Mortality Cumulative per Million",
x = "Total Deaths per Million",
y = "Excess Mortality Cumulative per Million") +
theme_minimal()
# Highlight and label countries where the difference is at least 3000
highlighted_countries <- scatter_data %>%
filter(abs(excess_mortality_cumulative_per_million - total_deaths_per_million) >= 3000)
scatter_plot <- scatter_plot +
geom_point(data = highlighted_countries, aes(x = total_deaths_per_million, y = excess_mortality_cumulative_per_million), color = "red") +
geom_text(data = highlighted_countries, aes(x = total_deaths_per_million, y = excess_mortality_cumulative_per_million, label = location), vjust = -1, size = 3, color = "black")
# Print the plot
print(scatter_plot)
# Identify countries with excess mortality at least 3000 above the reported death rate and at least 50 data points
selected_countries <- current %>%
filter((excess_mortality_cumulative_per_million - total_deaths_per_million) >= 3000) %>%
group_by(location) %>%
filter(n() >= 50) %>%
top_n(3, excess_mortality_cumulative_per_million - total_deaths_per_million) %>%
pull(location)
View(current)
# Ensure required libraries are loaded
library(ggplot2)
library(dplyr)
# Filter data to include only rows with non-NA values for the required columns
scatter_data <- current %>%
filter(!is.na(total_deaths_per_million) & !is.na(excess_mortality_cumulative_per_million))
# Check the structure of the filtered data
str(scatter_data)
# Create the scatter plot
scatter_plot <- ggplot(scatter_data, aes(x = total_deaths_per_million, y = excess_mortality_cumulative_per_million)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue", size = 1) + # y = x line
geom_abline(intercept = 3000, slope = 1, linetype = "dashed", color = "red", size = 1) + # y = x + 3000 line
geom_abline(intercept = -3000, slope = 1, linetype = "dashed", color = "green", size = 1) + # y = x - 3000 line
labs(title = "Total Deaths per Million vs. Excess Mortality Cumulative per Million",
x = "Total Deaths per Million",
y = "Excess Mortality Cumulative per Million") +
theme_minimal()
# Highlight and label countries where the difference is at least 3000
highlighted_countries <- scatter_data %>%
filter(abs(excess_mortality_cumulative_per_million - total_deaths_per_million) >= 3000)
# Check the highlighted countries
print(highlighted_countries)
scatter_plot <- scatter_plot +
geom_point(data = highlighted_countries, aes(x = total_deaths_per_million, y = excess_mortality_cumulative_per_million), color = "red") +
geom_text(data = highlighted_countries, aes(x = total_deaths_per_million, y = excess_mortality_cumulative_per_million, label = location), vjust = -1, size = 3, color = "black")
# Print the plot
print(scatter_plot)
# Check the filtering criteria
selected_countries <- current %>%
filter((excess_mortality_cumulative_per_million - total_deaths_per_million) >= 3000) %>%
group_by(location) %>%
filter(n() >= 50) %>%
top_n(3, excess_mortality_cumulative_per_million - total_deaths_per_million) %>%
pull(location)
# Check the selected countries
print(selected_countries)
# Manually select a few countries if the automatic selection fails
manual_selected_countries <- c("Country1", "Country2", "Country3") # Replace with actual country names from your dataset
# Filter main covid data for the manually selected countries
time_series_data <- covid_data %>%
filter(location %in% manual_selected_countries & !is.na(total_deaths_per_million) & !is.na(excess_mortality_cumulative_per_million))
# Plot the time series for total deaths and excess mortality for the selected countries
time_series_plot <- ggplot(time_series_data, aes(x = date)) +
geom_line(aes(y = total_deaths_per_million, color = location, linetype = "Total Deaths per Million")) +
geom_line(aes(y = excess_mortality_cumulative_per_million, color = location, linetype = "Excess Mortality per Million")) +
labs(title = "Total Deaths per Million and Excess Mortality per Million Over Time",
x = "Date",
y = "Deaths per Million",
color = "Country",
linetype = "Metric") +
theme_minimal()
# Print the plot
print(time_series_plot)
# Check the filtering criteria
selected_countries <- current %>%
filter((excess_mortality_cumulative_per_million - total_deaths_per_million) >= 3000) %>%
group_by(location) %>%
filter(n() >= 50) %>%
top_n(3, excess_mortality_cumulative_per_million - total_deaths_per_million) %>%
pull(location)
library(ggplot2)
library(dplyr)
# Create the scatter plot
scatter_plot <- ggplot(current, aes(x = total_deaths_per_million, y = excess_mortality_cumulative_per_million)) +
geom_point() +
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +  # y = x line
geom_abline(slope = 1, intercept = 3000, color = "blue", linetype = "dashed") +  # y = x + 3000 line
geom_abline(slope = 1, intercept = -3000, color = "blue", linetype = "dashed") +  # y = x - 3000 line
labs(
title = "Total Deaths per Million vs. Excess Mortality per Million",
x = "Total Deaths per Million",
y = "Excess Mortality per Million"
) +
theme_minimal()
# Identify countries where the difference is at least 3000
significant_diff <- current %>%
filter(abs(excess_mortality_cumulative_per_million - total_deaths_per_million) >= 3000)
# Add text labels for these countries
scatter_plot <- scatter_plot +
geom_text(data = significant_diff, aes(label = location), hjust = 0, vjust = 1)
# Print the scatter plot
print(scatter_plot)
# Identify countries where the difference is at least 3000
significant_diff <- current %>%
filter(abs(excess_mortality_cumulative_per_million - total_deaths_per_million) >= 3000)
# Add text labels for these countries
scatter_plot <- scatter_plot +
geom_text(data = significant_diff, aes(label = location), hjust = 0, vjust = 1)
# Print the scatter plot
print(scatter_plot)
# Select three countries with the required conditions
selected_countries <- significant_diff %>%
filter(!is.na(total_deaths_per_million), !is.na(excess_mortality_cumulative_per_million)) %>%
arrange(desc(excess_mortality_cumulative_per_million - total_deaths_per_million)) %>%
head(3) %>%
pull(location)
# Filter data for selected countries
time_series_data <- covid_data %>%
filter(location %in% selected_countries) %>%
select(location, date, total_deaths_per_million, excess_mortality_cumulative_per_million)
# Plot time series
time_series_plot <- ggplot(time_series_data, aes(x = date)) +
geom_line(aes(y = total_deaths_per_million, color = "Total Deaths per Million")) +
geom_line(aes(y = excess_mortality_cumulative_per_million, color = "Excess Mortality per Million")) +
facet_wrap(~ location, scales = "free_y") +
labs(
title = "Total Deaths per Million and Excess Mortality per Million Over Time",
x = "Date",
y = "Rate per Million",
color = "Metric"
) +
theme_minimal()
# Print the time series plot
print(time_series_plot)
# Print the scatter plot
print(scatter_plot)
# Select three countries with the required conditions
selected_countries <- significant_diff %>%
filter(!is.na(total_deaths_per_million), !is.na(excess_mortality_cumulative_per_million)) %>%
arrange(desc(excess_mortality_cumulative_per_million - total_deaths_per_million)) %>%
head(3) %>%
pull(location)
# Filter data for selected countries
time_series_data <- covid_data %>%
filter(location %in% selected_countries) %>%
select(location, date, total_deaths_per_million, excess_mortality_cumulative_per_million) %>%
pivot_longer(cols = c(total_deaths_per_million, excess_mortality_cumulative_per_million),
names_to = "metric", values_to = "value")
# Plot time series with different colors and styles for each country and metric
time_series_plot <- ggplot(time_series_data, aes(x = date, y = value, color = location, linetype = metric)) +
geom_line(size = 1) +
labs(
title = "Total Deaths per Million and Excess Mortality per Million Over Time",
x = "Date",
y = "Rate per Million",
color = "Country",
linetype = "Metric"
) +
theme_minimal() +
theme(legend.position = "bottom") +
scale_color_manual(values = c("red", "blue", "green")) +
scale_linetype_manual(values = c("solid", "dashed"))
# Print the combined time series plot
print(time_series_plot)
# a.
library(ggplot2)
library(dplyr)
library(ggrepel)
# a.
library(ggplot2)
library(dplyr)
# Create the scatter plot with smaller points and text
scatter_plot <- ggplot(current, aes(x = total_deaths_per_million, y = excess_mortality_cumulative_per_million)) +
geom_point(size = 1) +  # Smaller points
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +  # y = x line
geom_abline(slope = 1, intercept = 3000, color = "blue", linetype = "dashed") +  # y = x + 3000 line
geom_abline(slope = 1, intercept = -3000, color = "blue", linetype = "dashed") +  # y = x - 3000 line
labs(
title = "Total Deaths per Million vs. Excess Mortality per Million",
x = "Total Deaths per Million",
y = "Excess Mortality per Million"
) +
theme_minimal(base_size = 15) +  # Larger base size for the plot
theme(plot.title = element_text(size = 20))
# Identify countries where the difference is at least 3000
significant_diff <- current %>%
filter(abs(excess_mortality_cumulative_per_million - total_deaths_per_million) >= 3000)
# Add text labels for these countries with geom_label_repel
scatter_plot <- scatter_plot +
geom_point(data = significant_diff, color = "blue", size = 1) +
geom_label_repel(data = significant_diff, aes(label = location),
box.padding = 0.35, point.padding = 0.5,
segment.color = 'grey50', size = 2.5)  # Smaller text
install.packages("ggrepel")
# a.
library(ggplot2)
library(dplyr)
library(ggrepel)
library(ggrepel)
# Create the scatter plot with smaller points and text
scatter_plot <- ggplot(current, aes(x = total_deaths_per_million, y = excess_mortality_cumulative_per_million)) +
geom_point(size = 1) +  # Smaller points
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +  # y = x line
geom_abline(slope = 1, intercept = 3000, color = "blue", linetype = "dashed") +  # y = x + 3000 line
geom_abline(slope = 1, intercept = -3000, color = "blue", linetype = "dashed") +  # y = x - 3000 line
labs(
title = "Total Deaths per Million vs. Excess Mortality per Million",
x = "Total Deaths per Million",
y = "Excess Mortality per Million"
) +
theme_minimal(base_size = 15) +  # Larger base size for the plot
theme(plot.title = element_text(size = 20))
# Identify countries where the difference is at least 3000
significant_diff <- current %>%
filter(abs(excess_mortality_cumulative_per_million - total_deaths_per_million) >= 3000)
# Add text labels for these countries with geom_label_repel
scatter_plot <- scatter_plot +
geom_point(data = significant_diff, color = "blue", size = 1) +
geom_label_repel(data = significant_diff, aes(label = location),
box.padding = 0.35, point.padding = 0.5,
segment.color = 'grey50', size = 2.5)  # Smaller text
# Print the scatter plot with larger size
print(scatter_plot)
# a.
library(ggplot2)
library(dplyr)
library(ggrepel)
# Create the scatter plot with smaller points and text
scatter_plot <- ggplot(current, aes(x = total_deaths_per_million, y = excess_mortality_cumulative_per_million)) +
geom_point(size = 1) +  # Smaller points
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +  # y = x line
geom_abline(slope = 1, intercept = 3000, color = "blue", linetype = "dashed") +  # y = x + 3000 line
geom_abline(slope = 1, intercept = -3000, color = "blue", linetype = "dashed") +  # y = x - 3000 line
labs(
title = "Total Deaths per Million vs. Excess Mortality per Million",
x = "Total Deaths per Million",
y = "Excess Mortality per Million"
) +
theme_minimal(base_size = 15) +  # Larger base size for the plot
theme(plot.title = element_text(size = 20))
# Identify countries where the difference is at least 3000
significant_diff <- current %>%
filter(abs(excess_mortality_cumulative_per_million - total_deaths_per_million) >= 3000)
# Add text labels for these countries with geom_label_repel
scatter_plot <- scatter_plot +
geom_point(data = significant_diff, color = "blue", size = 1) +
geom_label_repel(data = significant_diff, aes(label = location),
box.padding = 0.35, point.padding = 0.5,
segment.color = 'grey50', size = 2.5)  # Smaller text
# Print the scatter plot with larger size
print(scatter_plot)
# b.
# Select three countries with the required conditions
selected_countries <- significant_diff %>%
filter(!is.na(total_deaths_per_million), !is.na(excess_mortality_cumulative_per_million)) %>%
arrange(desc(excess_mortality_cumulative_per_million - total_deaths_per_million)) %>%
head(3) %>%
pull(location)
# Filter data for selected countries
time_series_data <- covid_data %>%
filter(location %in% selected_countries) %>%
select(location, date, total_deaths_per_million, excess_mortality_cumulative_per_million) %>%
pivot_longer(cols = c(total_deaths_per_million, excess_mortality_cumulative_per_million),
names_to = "metric", values_to = "value")
# Plot time series with different colors and normal lines for each country and metric
time_series_plot <- ggplot(time_series_data, aes(x = date, y = value, color = location, linetype = metric)) +
geom_line(size = 1) +
labs(
title = "Total Deaths per Million and Excess Mortality per Million Over Time",
x = "Date",
y = "Rate per Million",
color = "Country",
linetype = "Metric"
) +
theme_minimal(base_size = 15) +  # Larger base size for the plot
theme(plot.title = element_text(size = 20), legend.position = "bottom") +
scale_color_manual(values = c("red", "blue", "green")) +
scale_linetype_manual(values = c("solid", "dashed"))
# Print the combined time series plot with larger size
print(time_series_plot)
